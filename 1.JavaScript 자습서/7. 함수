* 함수(Functions) *
- 가장 핵심이 되는 컴포넌트
  예시
  function add(x, y) {
    const total = x + y;
    return total;
  }
  add(); // NaN       add(2, 3, 4); // 4는 무시되고 5값이 반환된다

- rest 매개변수 구문 (...args)를 사용하면 배열로 수집할 수 있고 for...of반복문 사용 가능
  function avg(...args) {
  let sum = 0;
  for (const item of args) {
    sum += item;
  }
  return sum / args.length;
  }
  avg(2, 3, 4, 5); // 3.5     ...args를 이용해서 avg(2, 3, 4, 5) => [2, 3, 4, 5]가 된다

- 구조 분해 할당(객체를 하나로 합치고, 분해할 수 있다)
  // 중괄호({ })에 유의하세요. 객체를 분해합니다.
  function area({ width, height }) {
    return width * height;
  }

  // 여기서 중괄호({ })는 새로운 객체를 생성합니다.
  console.log(area({ width: 2, height: 3 })); // 6

- 익명 함수(이름이 없는 함수)
  // 괄호 앞에 함수명이 없음을 주목해주세요.
  const avg = function (...args) {
    let sum = 0;
    for (const item of args) {
      sum += item;
    }
    return sum / args.length;
  };
  위 예시인 이름없는 함수 = function avg() {}함수와 의미적으로 같다

- !! 화살표 함수 !!
  // 괄호 앞에 함수명이 없음을 주목해주세요.
  const avg = (...args) => {
    let sum = 0;
    for (const item of args) {
      sum += item;
    }
    return sum / args.length;
  }; // 평균을 구하는 함수

  // 단순히 표현식을 반환할 때, `return`을 생략할 수 있습니다.
  const sum = (a, b, c) => a + b + c; // 단순한 합을 구하는 함수

- 즉시 실행 함수(정의 되자마자 즉시 실행)
  (function() {
    ....
  })();

- 재귀 함수(질문하기)


- 함수는 일급 객체 이다(변수에 할당하고 다른 함수에 인수로 전달하고 다른 함수에서 반환 등등 가능)
  // 함수를 반환하는 함수
  const add = (x) => (y) => x + y;
  // 함수를 매개변수로 받는 함수
  const babies = ["dog", "cat", "hen"].map((name) => `baby ${name}`);

- 내장함수(Inner functions)
  함수 선언은 다른 함수 내부에서도 가능하고, 내부 함수는 부모함수 범위에 있는 변수에 접근 가능하지만 부모함수는 내부에 접근 불가능하다
  functions parentFunc() {
    const a = 1;

    function nestedFunc() {
      const b = 4; // parentFunc은 사용할 수 없는 변수
      return a + b;
    }
    return nestedFunc(); // 5
  }